/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package vista;

import controlador.Ctrl_Cliente;
import modelo.Cliente;
import conexion.Conexion;
import java.awt.Dimension;
import conexion.Conexion;
import java.awt.Color;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ESTIMADO USUARIO
 */
public class InterGestCliente extends javax.swing.JInternalFrame {

    /**
     * Creates new form InterGestCliente
     */
    public InterGestCliente() {
        initComponents();
        this.setSize(new Dimension(730, 360));
        this.setTitle("Product management");
        this.CargarTablaClientes();
        this.getContentPane().setBackground(Color.pink);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableClientes = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        Update = new javax.swing.JButton();
        Delete = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        CNI = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        CNombre = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        CApellido = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        CTlf = new javax.swing.JTextField();
        CDireccion = new javax.swing.JTextField();
        Search = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTableClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTableClientes);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 360, 250));

        jLabel2.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        jLabel2.setText("Client Management");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 10, -1, -1));

        Update.setBackground(new java.awt.Color(153, 255, 153));
        Update.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        Update.setText("Update");
        Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateActionPerformed(evt);
            }
        });
        getContentPane().add(Update, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 270, -1, -1));

        Delete.setBackground(new java.awt.Color(255, 51, 51));
        Delete.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        Delete.setText("Delete");
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });
        getContentPane().add(Delete, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 270, -1, -1));

        jLabel5.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Surname");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 140, 110, -1));

        jLabel6.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Tlf nÂº");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 180, 110, -1));
        getContentPane().add(CNI, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 60, 160, -1));

        jLabel4.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Name");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 100, 110, -1));
        getContentPane().add(CNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 100, 160, -1));

        jLabel7.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Address");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 220, 110, -1));
        getContentPane().add(CApellido, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 140, 160, -1));

        jLabel3.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Identity number");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 60, 130, -1));
        getContentPane().add(CTlf, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 180, 160, -1));
        getContentPane().add(CDireccion, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 220, 160, -1));

        Search.setBackground(new java.awt.Color(51, 255, 204));
        Search.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        Search.setText("Search");
        Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchActionPerformed(evt);
            }
        });
        getContentPane().add(Search, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 270, 90, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateActionPerformed

        if (CNI.getText().trim().isEmpty()
                || CNombre.getText().trim().isEmpty()
                || CApellido.getText().trim().isEmpty()
                || CTlf.getText().trim().isEmpty()
                || CDireccion.getText().trim().isEmpty()) {

            JOptionPane.showMessageDialog(null, "Fill all the fields");
        } else {
            try {
                int telef = Integer.parseInt(CTlf.getText().trim());
                if (telef <= 0) {
                    JOptionPane.showMessageDialog(null, "Phone number must be greater than 0");
                    return;
                }
                if (telef < 99999999) {
                    JOptionPane.showMessageDialog(null, "The phone number must have at least 9 digits");
                    return;
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Please, fill the phone number field with a valid number");
                return;
            }
            Cliente cliente = new Cliente();
            Ctrl_Cliente controlCliente = new Ctrl_Cliente();

            cliente.setNIdentidad(CNI.getText().trim());
            cliente.setNombre(CNombre.getText().trim());
            cliente.setApellido(CApellido.getText().trim());
            cliente.setTelefono(CTlf.getText().trim());
            cliente.setDireccion(CDireccion.getText().trim());

            if (controlCliente.actualizar(cliente, idcliente)) {
                JOptionPane.showMessageDialog(null, "Update Successful");
                CNI.setText("");
                CNombre.setText("");
                CApellido.setText("");
                CTlf.setText("");
                CDireccion.setText("");
                this.CargarTablaClientes();
            } else {
                JOptionPane.showMessageDialog(null, "Update Denied");
            }
        }

    }//GEN-LAST:event_UpdateActionPerformed

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
        if (!CNI.getText().isEmpty()) {
            int option = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this client?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);

            if (option == JOptionPane.YES_OPTION) {
                Cliente cliente = new Cliente();
                Ctrl_Cliente controlCliente = new Ctrl_Cliente();

                cliente.setNIdentidad(CNI.getText().trim());
                cliente.setNombre(CNombre.getText().trim());
                cliente.setApellido(CApellido.getText().trim());
                cliente.setTelefono(CTlf.getText().trim());
                cliente.setDireccion(CDireccion.getText().trim());

                if (!controlCliente.eliminar(idcliente)) {
                    JOptionPane.showMessageDialog(null, "Delete Successful");
                    CNI.setText("");
                    CNombre.setText("");
                    CApellido.setText("");
                    CTlf.setText("");
                    CDireccion.setText("");
                    this.CargarTablaClientes();
                } else {
                    JOptionPane.showMessageDialog(null, "Delete Denied");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Deletion Cancelled");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Select a client");
        }
    }//GEN-LAST:event_DeleteActionPerformed

    private void SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchActionPerformed
        String identityNumber = CNI.getText();
        if (!identityNumber.isEmpty()) {
            EnviarDatosDNIMarcado(identityNumber);
        } else {
            JOptionPane.showMessageDialog(null, "Couldn't find the product");
        }
    }//GEN-LAST:event_SearchActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField CApellido;
    private javax.swing.JTextField CDireccion;
    private javax.swing.JTextField CNI;
    private javax.swing.JTextField CNombre;
    private javax.swing.JTextField CTlf;
    private javax.swing.JButton Delete;
    private javax.swing.JButton Search;
    private javax.swing.JButton Update;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    public static javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTable jTableClientes;
    // End of variables declaration//GEN-END:variables

    int idcliente = 0;
    String nidentidad = "";
    String nombre = "";
    String apellido = "";
    String telefono = "";
    String direccion = "";

    private void CargarTablaClientes() {
        Connection con = Conexion.conectar();
        DefaultTableModel model = new DefaultTableModel();
        String sql = "select id_cliente, NIdentidad, Nombre, Apellido, Telefono, Direccion from clientes";
        Statement st;
        try {
            st = con.createStatement();
            ResultSet rs = st.executeQuery(sql);

            model.addColumn("ID");
            model.addColumn("IDNÂº");
            model.addColumn("Name");
            model.addColumn("Surname");
            model.addColumn("Tlf nÂº");
            model.addColumn("Address");

            while (rs.next()) {
                Object fila[] = new Object[6];
                for (int i = 0; i < 6; i++) {
                    fila[i] = rs.getObject(i + 1);
                }
                model.addRow(fila);
            }

            InterGestCliente.jTableClientes.setModel(model); // Establecer el modelo en la tabla

            jTableClientes.getColumnModel().getColumn(0).setPreferredWidth(40);

            InterGestCliente.jScrollPane1.setViewportView(InterGestCliente.jTableClientes);

            con.close();
        } catch (SQLException e) {
            System.out.println("Error filling the product table:" + e);
        }

        jTableClientes.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int fila_point = jTableClientes.rowAtPoint(e.getPoint());
                int columna_point = 0;

                if (fila_point > -1) {
                    idcliente = (int) model.getValueAt(fila_point, columna_point);
                    EnviarDatosClienteSeleccionado(idcliente);
                }
            }
        });
    }

    private void EnviarDatosClienteSeleccionado(int idcliente) {
        try {
            Connection con = Conexion.conectar();
            PreparedStatement pst = con.prepareStatement("select * from clientes where id_cliente = '" + idcliente + "'");
            ResultSet rs = pst.executeQuery();

            if (rs.next()) {
                CNI.setText(rs.getString("NIdentidad"));
                CNombre.setText(rs.getString("Nombre"));
                CApellido.setText(rs.getString("Apellido"));
                CTlf.setText(rs.getString("Telefono"));
                CDireccion.setText(rs.getString("Direccion"));
            }
            con.close();

        } catch (SQLException e) {
            System.out.println("Error selecting the client" + e);
        }
    }

    private void EnviarDatosDNIMarcado(String idcliente) {
        try {
            Connection con = Conexion.conectar();
            PreparedStatement pst = con.prepareStatement("select * from clientes where NIdentidad = '" + idcliente + "'");
            ResultSet rs = pst.executeQuery();

            if (rs.next()) {
                CNI.setText(rs.getString("NIdentidad"));
                CNombre.setText(rs.getString("Nombre"));
                CApellido.setText(rs.getString("Apellido"));
                CTlf.setText(rs.getString("Telefono"));
                CDireccion.setText(rs.getString("Direccion"));
            } else {
                JOptionPane.showMessageDialog(null, "Couldnt find the client");
            }
            con.close();

        } catch (SQLException e) {
            System.out.println("Error selecting the client" + e);
            JOptionPane.showMessageDialog(null, "Couldnt find the client");
        }
    }

}
